/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author lam_m
 */
public class BandejaDeEntrada extends javax.swing.JFrame {

    /**
     * Creates new form BandejaDeEntrada
     */
    DefaultListModel model;
    static String usr;
    public BandejaDeEntrada(String user) {
        initComponents();
        usr = user;
        model = new DefaultListModel();
        
        
        correos.setModel(model);
        
        File co = new File("C:\\MEIA\\Correo.txt");
        
        try{
            FileReader frp = new FileReader(co);
            BufferedReader brp = new BufferedReader(frp);
            String linea;
            while((linea=brp.readLine())!= null){
                String[] info = linea.split("\\|");
                if (info[3].equals(usr) && info[8].equals("1")) {
                    //Emisor - Fecha - Asunto - Mensaje - Adjunto
                    String nuevaLinea = info[2] + " - " + info[4] + " - " + info[5] + " - " + info[6] + " - " + info[7];
                    model.addElement(nuevaLinea);
                }
            }
            brp.close();
        }catch(Exception e){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        Eliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        correos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        Regresar = new javax.swing.JButton();
        Busqueda = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        correos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        correos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                correosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(correos);

        jLabel1.setText("Emisor - Fecha - Asunto - Mensaje - Adjunto");

        Regresar.setText("Regresar");
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });

        Busqueda.setText("Busqueda");
        Busqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BusquedaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Eliminar)
                    .addComponent(Regresar)
                    .addComponent(Busqueda))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(Eliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Regresar)
                        .addGap(18, 18, 18)
                        .addComponent(Busqueda))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new Usuario(usr).setVisible(true);
    }//GEN-LAST:event_RegresarActionPerformed

    private void correosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_correosKeyPressed
        // TODO add your handling code here:
        String datos = correos.getSelectedValue();
        if (datos != null) {
            this.setVisible(false);
            new AbrirCorreo(usr, datos).setVisible(true);   
        }
    }//GEN-LAST:event_correosKeyPressed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
        String dato = correos.getSelectedValue();
        if (dato != null) {
            //Emisor - Fecha - Asunto - Mensaje - Adjunto
            String[] datosCo = dato.split("\\ - ");
            File co = new File("C:\\MEIA\\Correo.txt");
            try{
                FileReader frp = new FileReader(co);
                BufferedReader brp = new BufferedReader(frp);
                
                String linea;
                int posicion = 0;
                boolean hijoIzq = false;
                boolean hijoDer = false;
                int posicionIzq = 0;
                int posicionDer = 0;
                
                ArrayList datos = new ArrayList<>();
                while((linea=brp.readLine())!= null){
                   
                    String[] op = linea.split("\\|");
                    if (op[4].equals(datosCo[1])) { //Cuando las fechas son iguales
                       
                        if (!op[0].equals("0") || !op[1].equals("0")) {
                            if (!op[0].equals("0")) {
                                hijoIzq = true;
                                posicionIzq = Integer.valueOf(op[0]);
                            }
                            if (!op[1].equals("0")) {
                                hijoDer = true;
                                posicionDer = Integer.valueOf(op[1]);
                            }
                        }
                        String nuevaLinea = linea.substring(0, linea.lastIndexOf("|")) + "|0";
                        datos.add(nuevaLinea);
                        posicion = datos.size();
                    }
                    else{
                        datos.add(linea);    
                    }
                }
                brp.close();
                
                if (posicion == 1) {
                    
                }
                else{
                    if (hijoDer == false && hijoIzq == false) {
                        //Entonces solo se debe de cambiar el status y eliminar la referencia del padre.
                        for (int i = 0; i < datos.size(); i++) {
                            String[] Dato = datos.get(i).toString().split("\\|");
                            if (Dato[0].equals(String.valueOf(posicion)) || Dato[1].equals(String.valueOf(posicion))) {
                                if (Dato[0].equals(String.valueOf(posicion))) {
                                    //Se trata del hijo izquierdo
                                    String nuevaLinea = "0|" + Dato[1] + "|" + Dato[2] + "|" + Dato[3] + "|" + Dato[4] + "|" +Dato[5] + "|" +Dato[6] + "|" + Dato[7] + "|" + Dato[8];
                                    datos.set(i, nuevaLinea);
                                }else{
                                    //Se trata del hijo derecho
                                    String nuevaLinea = Dato[0] +"|0|" + Dato[2] + "|" + Dato[3] + "|" + Dato[4] + "|" +Dato[5] + "|" +Dato[6] + "|" + Dato[7] + "|" + Dato[8];
                                    datos.set(i, nuevaLinea);
                                }
                            }
                        }
                    }
                    else if (hijoDer == true && hijoIzq == true) {
                        //Se hace todo un camote xdxd
                        linea = "";
                        linea = datos.get(posicion - 1).toString();//Linea que sera eliminada
                        String [] DATO = linea.split("\\|"); //Datos de la linea que sera eliminada
                        String HijoDer = datos.get((Integer.valueOf(DATO[1])) -1).toString();
                        String DATOS[] = HijoDer.split("\\|"); //Datos del hijo derecho de linea que sera eliminada
                        if (DATOS[0].equals("0")) {
                            for (int i = 0; i < datos.size(); i++) {
                                String[] Dato = datos.get(i).toString().split("\\|");
                                if (Dato[0].equals(String.valueOf(posicion)) || Dato[1].equals(String.valueOf(posicion))) {
                                    if (Dato[0].equals(String.valueOf(posicion))) {
                                        //Se trata del hijo izquierdo
                                        String nuevaLinea = Dato[0] +"|0|" + Dato[2] + "|" + Dato[3] + "|" + Dato[4] + "|" + Dato[5] + "|" + Dato[6] + "|" + Dato[7] + "|" + Dato[8];
                                        datos.set(i, nuevaLinea);
                                    }else{
                                        //Se trata del hijo derecho
                                        String nuevaLinea = Dato[0] +"|0|" + Dato[2] + "|" + Dato[3] + "|" + Dato[4] + "|" +Dato[5] + "|" +Dato[6] + "|" + Dato[7] + "|" + Dato[8];
                                        datos.set(i, nuevaLinea);
                                    }
                                }
                            }
                        }
                        else{
                            //Se debe buscar al más peuqeño
                            boolean masPeque = false;
                            while(masPeque == false){
                                
                            }
                        }
                    } else{
                        //Se cuenta unicamente con un hijo. Solo se cambia la ref y se sigue con la life xdxd   
                        for (int i = 0; i < datos.size(); i++) {
                            String[] Dato = datos.get(i).toString().split("\\|");
                             if (Dato[0].equals(String.valueOf(posicion)) || Dato[1].equals(String.valueOf(posicion))) {
                                if (Dato[0].equals(String.valueOf(posicion))) {
                                    //Hijo izquierdo
                                    String a = "";
                                    if (hijoDer) {
                                       a = String.valueOf(posicionDer);
                                    }else{
                                        a = String.valueOf(posicionIzq);
                                    }
                                    String nuevaLinea = a +"|" + Dato[1] + "|" + Dato[2] + "|" + Dato[3] + "|" + Dato[4] + "|" +Dato[5] + "|" +Dato[6] + "|" + Dato[7] + "|" + Dato[8];
                                    datos.set(i, nuevaLinea);
                                }else{
                                    String a = "";
                                    if (hijoDer) {
                                       a = String.valueOf(posicionDer);
                                    }else{
                                        a = String.valueOf(posicionIzq);
                                    }
                                    String nuevaLinea = Dato[0] +"|" + a + "|" + Dato[2] + "|" + Dato[3] + "|" + Dato[4] + "|" +Dato[5] + "|" +Dato[6] + "|" + Dato[7] + "|" + Dato[8];
                                    datos.set(i, nuevaLinea);
                                }
                            }
                        }
                    }
                }
                
            }catch(Exception e){}
        }
    }//GEN-LAST:event_EliminarActionPerformed

    private void BusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BusquedaActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new BusquedaCorreo(usr).setVisible(true);
    }//GEN-LAST:event_BusquedaActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BandejaDeEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BandejaDeEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BandejaDeEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BandejaDeEntrada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BandejaDeEntrada(usr).setVisible(true);
            }
        });
    }
    
    private static void masIzquierdo(ArrayList datos, String datoCorreo){
        
        
        
        
        
        
    }
    
    private static void masDerecho(ArrayList datos, String datoCorreo){
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Busqueda;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Regresar;
    private javax.swing.JList<String> correos;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
