/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author lam_m
 */
public class EliminarUsuariosL extends javax.swing.JFrame {

    /**
     * Creates new form EliminarUsuariosL
     */
    public static String Usuario;
    DefaultListModel model;
    
    public EliminarUsuariosL(String usr) {
        initComponents();
        Usuario = usr;
        model = new DefaultListModel();
        Datos.setModel(model);
        
        String linea = "";
        File lu = new File("C:\\MEIA\\Lista_usuario.txt");
        BufferedReader brp = null;
        FileReader frp = null;
        
        try{
            frp = new FileReader(lu);
            brp = new BufferedReader(frp);
            while((linea=brp.readLine())!= null){
                String[]info = linea.split("\\|");
                if (info[1].equals(Usuario) && info[4].equals("1")) {
                    model.addElement(info[2] + "-" + info[0]);
                }
            }
            brp.close();
        }catch(Exception e ){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Datos = new javax.swing.JList<>();
        Eliminar = new javax.swing.JButton();
        Regresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Datos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(Datos);

        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        Regresar.setText("Regresar");
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Regresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(Eliminar)
                        .addGap(18, 18, 18)
                        .addComponent(Regresar)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new Usuario(Usuario).setVisible(true);
    }//GEN-LAST:event_RegresarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
        FileWriter TextOut;
        String datos = Datos.getSelectedValue();
        if (datos != null) {
            try{
                //Se deber√≠a recorrer desde el inicio y cuando encontremos 
                //uno que apunte a que deseamos elimnar entonces solo debemos cambiar los apuntadores
                File ilu = new File("C:\\MEIA\\Indice_ListaUsuario.txt");
                File dilu = new File("C:\\MEIA\\Desc_Indice_ListaUsuario.txt");
                
                File lu = new File("C:\\MEIA\\Lista_usuario.txt");
                File dlu = new File("C:\\MEIA\\Desc_Lista_usuario.txt");
                
                File l = new File("C:\\MEIA\\lista.txt");
                File Ml = new File("C:\\MEIA\\Master_lista.txt");
                
                FileReader frp = new FileReader(dilu);
                BufferedReader brp = new BufferedReader(frp);
                String linea = brp.readLine();
                brp.close();
                String[] info = linea.split("\\|");
                //1
                int begin = Integer.valueOf(info[1]);
                List datoS = new ArrayList<String>();
                frp = new FileReader(ilu);
                brp = new BufferedReader(frp);
                
                while((linea=brp.readLine())!= null){
                    String valor = linea;
                    String posicion = valor.substring(valor.indexOf("|") + 1);
                    String nombreDeLista = posicion.substring(posicion.indexOf("|") + 1);
                    datoS.add(nombreDeLista);
                }brp.close();
                
                String[]DatosAEliminar = datos.split("\\-");//0 usuario - 1 Lista
                String primeraLinea = (String) datoS.get(begin-1);//Linea donde empieza el texto
                String[] Info = primeraLinea.split("\\|");//Separacion 
                String texto = Info[2];
                String texto1 = DatosAEliminar[0];//Usuario
                String texto3 = Info[0];
                String texto4 = DatosAEliminar[1];//Lista
                
                //Actualizamos los valores 
                int regA = Integer.valueOf(info[2]);
                regA--;
                int regI = Integer.valueOf(info[3]);
                regI++;
                
                if(texto.equals(texto1) == true && texto3.equals(texto4) == true){//Se trata del primer elemento
                    //Cambaimos el apuntador a 0, modificamos el desc Indice
                    //CAMIBAMOS EN LISTA_USUARIO y restamos en lista
                    String nuevoPrimero = Info[3];
                    String nuevaLinea = Info[0] + "|" + Info[1] + "|" +Info[2] + "|0|0";
                    datoS.set(begin - 1, nuevaLinea);
                   
                    //Debemos sobreescribir el archivo
                    TextOut = new FileWriter(ilu, false);
                    for (int i = 0; i < datoS.size(); i++) {
                         TextOut.write((i+1) + "|1." + (i+1) + "|"+  datoS.get(i) + "\r\n");
                    }
                    TextOut.close();  
                   
                    //Sobreescribir en el archivo dsc_indice
                    String nuevoDI = info[0] + "|" + nuevoPrimero + "|" + regA + "|" + regI;
                    TextOut = new FileWriter(dilu, false);
                    TextOut.write(nuevoDI);
                    TextOut.close();  
                    
                    
               }else{
                    //Cuando el elemento no es el primero
                    int apuntadorNO = 0;
                    int posicion = 0;
                    for (int i = 0; i < datoS.size(); i++) {
                        String u = (String) datoS.get(i);
                        String data[] = u.split("\\|");
                        
                        if (data[0].equals(texto4) && data[1].equals(Usuario) && data[2].equals(texto1)) {
                            apuntadorNO = Integer.valueOf(data[3]);
                            String remplazo = data[0] + "|" + data[1] + "|" + data[2] + "|0|0";
                            datoS.set(i, remplazo);
                            posicion = i+1;
                            break;
                        }
                    }
                   
                    for (int i = 0; i < datoS.size(); i++) {
                        String u = (String) datoS.get(i);
                        String data[] = u.split("\\|");
                        if (data[3].equals(Integer.toString(posicion))) {
                            String remplazo = data[0] + "|" + data[1] + "|" + data[2] + "|" + apuntadorNO + "|1";
                            datoS.set(i, remplazo);
                            break;
                        }
                    }
                    
                    TextOut = new FileWriter(ilu, false);
                    for (int i = 0; i < datoS.size(); i++) {
                         TextOut.write((i+1) + "|1." + (i+1) + "|"+  datoS.get(i) + "\r\n");
                    }
                    TextOut.close(); 
                    
                    
                    //Sobreescribir en el archivo dsc_indice
                    String nuevoDI = info[0] + "|" + info[1] + "|" + regA + "|" + regI;
                    TextOut = new FileWriter(dilu, false);
                    TextOut.write(nuevoDI);
                    TextOut.close();  
                    
               }//De aqu√≠ para abajo va todo lo que es generico
               //Actulizamos lista o master_lista 
                    Boolean lista = false;
                    frp = new FileReader(l);
                    brp = new BufferedReader(frp);
                    datoS = new ArrayList<String>();
                    while((linea=brp.readLine())!= null){
                        Info = linea.split("\\|");
                        if(Info[0].equals(texto4) && Info[1].equals(Usuario)){
                            lista = true;
                            int numU = Integer.valueOf(Info[3]);
                            numU--;
                            String nueva = Info[0] + "|" + Info[1] + "|" + Info[2] + "|" + numU + "|" + Info[4] + "|1";
                            datoS.add(nueva);
                        }else{
                            datoS.add(linea);
                        }
                    }
                    brp.close();
                    if(lista){
                        //Sobreescribimos en la lista
                        TextOut = new FileWriter(l, false);
                        for (int i = 0; i < datoS.size(); i++) {
                             TextOut.write(datoS.get(i) + "\r\n");
                        }
                        TextOut.close();  
                        
                    }else{
                        frp = new FileReader(Ml);
                        brp = new BufferedReader(frp);
                        datoS = new ArrayList<String>();
                        while((linea=brp.readLine())!= null){
                            Info = linea.split("\\|");
                            if(Info[0].equals(texto4) && Info[1].equals(Usuario)){
                                lista = true;
                                int numU = Integer.valueOf(Info[3]);
                                numU--;
                                String nueva = Info[0] + "|" + Info[1] + "|" + Info[2] + "|" + numU + "|" + Info[4] + "|1";
                                datoS.add(nueva);
                            }else{
                                datoS.add(linea);
                            }
                        }
                        brp.close();
                        
                        //Sobreescribimos en Master_lista
                        TextOut = new FileWriter(Ml, false);
                        for (int i = 0; i < datoS.size(); i++) {
                             TextOut.write(datoS.get(i) + "\r\n");
                        }
                        TextOut.close(); 
                        JOptionPane.showMessageDialog(rootPane, "Usuario eliminado de la lista");
                        this.setVisible(false);
                        new Usuario(Usuario).setVisible(true);
                    }
                    //Actualizar el desc lista usuario
                    frp = new FileReader(dlu);
                    brp = new BufferedReader(frp);
                    linea = brp.readLine();
                    brp.close();
                    String[] dato = linea.split("\\|");
                    int rea = Integer.valueOf(dato[3]);
                    rea--;
                    int ren = Integer.valueOf(dato[4]);
                    ren++;
                    
                    TextOut = new FileWriter(dlu, false);
                    TextOut.write(dato[0] + "|" + dato[1] + "|" + dato[2] + "|" + rea + "|" + ren);//0 1 2
                    TextOut.close(); 
                    
                    //Sobreescribir lista_usuario
                    frp = new FileReader(lu);
                    brp = new BufferedReader(frp);
                    List listaUsuarios = new ArrayList<>();
                    while((linea=brp.readLine())!= null){
                        String[] datO = linea.split("\\|");
                        if(datO[0].equals(texto4) && datO[1].equals(Usuario) && datO[2].equals(texto1)){
                            listaUsuarios.add(datO[0] + "|" + datO[1] + "|" + datO[2] + "|" + datO[3] + "|0");
                        }else{
                            listaUsuarios.add(linea);
                        }
                    }
                    brp.close();
                    
                    TextOut = new FileWriter(lu, false);
                    for (int i = 0; i < listaUsuarios.size(); i++) {
                         TextOut.write(listaUsuarios.get(i) + "\r\n");
                    }
                    TextOut.close(); 
                    JOptionPane.showMessageDialog(rootPane, "Usuario eliminado");
                    this.setVisible(false);
                    new Usuario(Usuario).setVisible(true);
            }catch(Exception e){}
        }else{//Se trata de cualquier otro elemento, no debemos cambiar el primero del desc_indice pero si actualizar valores
           
        }
    }//GEN-LAST:event_EliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EliminarUsuariosL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EliminarUsuariosL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EliminarUsuariosL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EliminarUsuariosL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EliminarUsuariosL(Usuario).setVisible(true);
            }
        });
    }
    
    public static int anterior(){
        return 0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> Datos;
    private javax.swing.JButton Eliminar;
    private javax.swing.JButton Regresar;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
